package com.trio.view.ctrl;

import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zkplus.databind.AnnotateDataBinder;
import org.zkoss.zul.Button;
import org.zkoss.zul.Grid;
import org.zkoss.zul.ListModelList;
import org.zkoss.zul.Listbox;
import org.zkoss.zul.Messagebox;

import com.trio.base.TrioBasePage;
import com.trio.bean.h000.TrioH000Mstmenu;
import com.trio.view.ctrl.renderer.MenuListRenderer;

public class MenuCtrl extends TrioBasePage {

	private static final long serialVersionUID = 1L;
	private AnnotateDataBinder binder;
	private Listbox menuList;
	private Grid editMenuGrid;
	private Button createMenu;
	private Button deleteMenu;
	private Button searchMenu;
	
	private TrioH000Mstmenu _menu;

	@Override
	public void doAfterCompose(Component comp) throws Exception {
		super.doAfterCompose(comp);
		binder = (AnnotateDataBinder) page.getAttribute("binder");
		_menu = new TrioH000Mstmenu();
		menuList.setModel(new ListModelList(
				getMasterFacade().getTrioH000MstmenuDao().findAll()));
		menuList.setItemRenderer(new MenuListRenderer());
	}
	
	private ListModelList getModel() {
		return (ListModelList) menuList.getModel();
	}
	
	public void onClick$resetMenu() {
		menuList.clearSelection();
		menuList.setModel(new ListModelList(getMasterFacade().getTrioH000MstmenuDao().findAll()));
		_menu = new TrioH000Mstmenu();
		binder.loadComponent(editMenuGrid);
		createMenu.setDisabled(false);
		deleteMenu.setDisabled(true);
	}
	
	//set selection to edit data
	public void onSelect$menuList() {
		_menu = (TrioH000Mstmenu) menuList.getSelectedItem().getValue();
		binder.loadComponent(editMenuGrid);
		createMenu.setDisabled(true);
		deleteMenu.setDisabled(false);
	}
	
	public void onClick$createMenu() throws InterruptedException {
		if (_menu.getVmenuid() == null ||  _menu.getVtitle() == null
				|| _menu.getVparent() == null || _menu.getVlocation() == null
				|| _menu.getVimage() == null ) {
			Messagebox.show("Data belum lengkap");
		} else {
			getMasterFacade().getTrioH000MstmenuDao().saveOrUpdate(_menu, getUserSession());
			getModel().add(_menu);
		}
	}
	
	
	public void onClick$deleteMenu() throws InterruptedException {
		Messagebox.show("Are you sure to delete?", null, Messagebox.YES | Messagebox.NO, Messagebox.QUESTION, new EventListener() {
			public void onEvent(Event event) throws Exception {
				if(event.getName().equals("onYes")) {
					getModel().remove(_menu);
					getMasterFacade().getTrioH000MstmenuDao().delete(_menu);
				}
			}
		});
	}
	
	public void onClick$searchMenu() throws InterruptedException {
		TrioH000Mstmenu d = new TrioH000Mstmenu();
		d.setVmenuid(_menu.getVmenuid());
		d.setVtitle(_menu.getVtitle());
		d.setVparent(_menu.getVparent());
		d.setVlocation(_menu.getVlocation());
		d.setVimage(_menu.getVimage());
		
		menuList.setModel(new ListModelList(getMasterFacade().getTrioH000MstmenuDao().findByCriteria(d)));
		
	}

	public TrioH000Mstmenu get_menu() {
		return _menu;
	}

	public void set_menu(TrioH000Mstmenu _menu) {
		this._menu = _menu;
	}
	
	
}
